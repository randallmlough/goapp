{{ reserveImport "golang.org/x/crypto/bcrypt"}}

type Redactor interface {
	UnRedacted() string
}

type PasswordService interface {
	HashPassword(unHashedPassword Redactor) (string, error)
	ComparePassword(hashedPassword string, unHashedPassword Redactor) error
}

func NewPasswordService(salt string) PasswordService {
	return &passwordService{
		salt: salt,
	}
}

type passwordService struct {
	salt string
}

func (ps *passwordService) HashPassword(unHashedPassword Redactor) (string, error) {
	unRedacted := unHashedPassword.UnRedacted()
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(unRedacted+ps.salt), bcrypt.DefaultCost)
	if err != nil {
		return "", err
	}
	return string(hashedPassword), nil
}

func (ps *passwordService) ComparePassword(hashedPassword string, unHashedPassword Redactor) error {
	unRedacted := unHashedPassword.UnRedacted()
	if err := bcrypt.CompareHashAndPassword([]byte(hashedPassword), []byte(unRedacted+ps.salt)); err != nil {
		return err
	}
	return nil
}
